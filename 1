
================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)'


  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 6
    - 5 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - number of entries in student   solution: 2
    - number of entries in reference solution: 6
    - 4 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
    - segments() contains the same segment more than once
    - segment 4: (4096, 25088) -> (4096, 24064)
    - segment 6: (4096, 25088) -> (4096, 24064)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (4096, 22016) -> (4096, 25088)
    - reference segment 3: (4096, 20992) -> (4096, 22016) -> (4096, 23040) -> (4096, 24064) -> (4096, 25088)

    - number of entries in student   solution: 8
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including:
      '(4096, 25088) -> (4096, 24064)'

    - 1 missing entry in student solution:
      '(8192, 25088) -> (8192, 26112) -> (8192, 27136) -> (8192, 28160) -> (8192, 29184)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 9000) -> (1000, 26000)
    - reference segment 5: (1000, 2000) -> (1000, 9000) -> (1000, 13000) -> (1000, 23000) -> (1000, 26000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 7
    - 1 extra entry in student solution:
      '(1000, 9000) -> (1000, 26000)'

    - 5 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (25000, 9000) -> (25000, 31000)
    - reference segment 28: (25000, 8000) -> (25000, 9000) -> (25000, 12000) -> (25000, 27000) -> (25000, 29000) -> (25000, 31000)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 31
    - 6 extra entries in student solution, including:
      '(25000, 31000) -> (25000, 29000)'

    - 28 missing entries in student solution, including:
      '(13000, 29000) -> (19000, 29000) -> (25000, 29000) -> (28000, 29000)'


  * filename = input300.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 6
    - 3 missing entries in student solution, including:
      '(23000, 8500) -> (29550, 8500) -> (30000, 8500) -> (30950, 8500)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (30000, 0) -> (25000, 0)
    - reference segment 1: (0, 0) -> (5000, 0) -> (10000, 0) -> (15000, 0) -> (20000, 0) -> (25000, 0) -> (30000, 0)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(30000, 0) -> (25000, 0)'

    - 2 missing entries in student solution, including:
      '(5000, 0) -> (10000, 3100) -> (15000, 6200) -> (20000, 9300) -> (25000, 12400)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains the same segment more than once
    - segment 94: (18010, 10832) -> (17870, 10726)
    - segment 98: (18010, 10832) -> (17870, 10726)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 8: (10928, 580) -> (11669, 1741)
    - reference segment 219: (10681, 193) -> (10928, 580) -> (11175, 967) -> (11422, 1354) -> (11669, 1741)

    - number of entries in student   solution: 317
    - number of entries in reference solution: 288
    - 124 extra entries in student solution, including:
      '(12652, 30395) -> (12142, 30061)'

    - 95 missing entries in student solution, including:
      '(16384, 30255) -> (15979, 30308) -> (15574, 30361) -> (15169, 30414) -> (14764, 30467)'


  * filename = rs1423.txt
    - number of entries in student   solution: 237
    - number of entries in reference solution: 443
    - 206 missing entries in student solution, including:
      '(14169, 27672) -> (13927, 27810) -> (13685, 27948) -> (13443, 28086)'


==> FAILED

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)'


  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 6
    - 5 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - number of entries in student   solution: 2
    - number of entries in reference solution: 6
    - 4 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)'


  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 6
    - 5 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
    - number of entries in student   solution: 24
    - number of entries in reference solution: 25
    - 1 missing entry in student solution:
      '(94, 7046) -> (6451, 11154) -> (11830, 14630) -> (15742, 17158)'


    - failed on trial 38 of 100

  * 50 random line segments
  * 100 random line segments
==> FAILED

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
    - number of entries in student   solution: 24
    - number of entries in reference solution: 25
    - 1 missing entry in student solution:
      '(5922, 11940) -> (6177, 12240) -> (6364, 12460) -> (7146, 13380)'


    - failed on trial 9 of 100

  * 50 random line segments
  * 100 random line segments
    - number of entries in student   solution: 99
    - number of entries in reference solution: 100
    - 1 missing entry in student solution:
      '(11498, 2337) -> (11652, 4207) -> (11666, 4377) -> (11932, 7607)'


    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(0, 8) -> (2, 8) -> (7, 8) -> (8, 8)'


    - failed on trial 53 of 500
     10
         2     6
         0     8
         7     1
         7     8
         2     8
         8     8
         6     9
         0     4
         1     2
         7     9

  * 50 random points in a 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 18: (9, 2) -> (8, 2)
    - segment 20: (9, 2) -> (8, 2)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 8: (1, 2) -> (7, 8)
    - reference segment 23: (0, 1) -> (1, 2) -> (3, 4) -> (4, 5) -> (5, 6) -> (7, 8)

    - number of entries in student   solution: 35
    - number of entries in reference solution: 38
    - 22 extra entries in student solution, including:
      '(8, 7) -> (9, 8)'

    - 25 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (9, 9)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 32: (9, 0) -> (8, 0)
    - segment 36: (9, 0) -> (8, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (2, 0) -> (9, 0)
    - reference segment 51: (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 134
    - number of entries in reference solution: 125
    - 84 extra entries in student solution, including:
      '(9, 7) -> (9, 9)'

    - 75 missing entries in student solution, including:
      '(1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains the same segment more than once
    - segment 26: (49, 4) -> (43, 4)
    - segment 30: (49, 4) -> (43, 4)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 7: (11, 1) -> (11, 45)
    - reference segment 192: (11, 0) -> (11, 1) -> (11, 3) -> (11, 6) -> (11, 8) -> (11, 18) -> (11, 35) -> (11, 42) -> (11, 45)

    - number of entries in student   solution: 121
    - number of entries in reference solution: 212
    - 75 extra entries in student solution, including:
      '(48, 42) -> (46, 42)'

    - 166 missing entries in student solution, including:
      '(14, 48) -> (21, 48) -> (32, 48) -> (39, 48)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 3
    - number of entries in reference solution: 10
    - 7 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3)'


  * 5-by-5 grid
    - segments() contains the same segment more than once
    - segment 5: (4, 0) -> (3, 0)
    - segment 8: (4, 0) -> (3, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (2, 0) -> (4, 0)
    - reference segment 3: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)

    - number of entries in student   solution: 17
    - number of entries in reference solution: 16
    - 8 extra entries in student solution, including:
      '(4, 2) -> (4, 4)'

    - 7 missing entries in student solution, including:
      '(0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4)'


  * 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 36: (9, 0) -> (8, 0)
    - segment 41: (9, 0) -> (8, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 5: (2, 0) -> (9, 0)
    - reference segment 67: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 168
    - number of entries in reference solution: 154
    - 106 extra entries in student solution, including:
      '(9, 7) -> (9, 9)'

    - 92 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)'


  * 20-by-20 grid
    - segments() contains the same segment more than once
    - segment 252: (19, 0) -> (18, 0)
    - segment 265: (19, 0) -> (18, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 13: (2, 0) -> (19, 0)
    - reference segment 1203: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0)

    - number of entries in student   solution: 2082
    - number of entries in reference solution: 2446
    - 1358 extra entries in student solution, including:
      '(19, 17) -> (19, 19)'

    - 1722 missing entries in student solution, including:
      '(0, 19) -> (1, 19) -> (2, 19) -> (3, 19) -> (4, 19) -> (5, 19) -> (6, 19) -> (7, 19) -> (8, 19) -> (9, 19) -> (10, 19) -> (11, 19) -> (12, 19) -> (13, 19) -> (14, 19) -> (15, 19) -> (16, 19) -> (17, 19) -> (18, 19) -> (19, 19)'


  * 5-by-4 grid
    - segments() contains the same segment more than once
    - segment 3: (4, 0) -> (3, 0)
    - segment 5: (4, 0) -> (3, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2, 0) -> (4, 0)
    - reference segment 2: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)

    - number of entries in student   solution: 8
    - number of entries in reference solution: 13
    - 4 extra entries in student solution, including:
      '(4, 1) -> (3, 1)'

    - 9 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3)'


  * 6-by-4 grid
    - segments() contains the same segment more than once
    - segment 5: (5, 0) -> (4, 0)
    - segment 7: (5, 0) -> (4, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2, 0) -> (5, 0)
    - reference segment 3: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 16
    - 5 extra entries in student solution, including:
      '(5, 1) -> (4, 1)'

    - 11 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3)'


  * 10-by-4 grid
    - segments() contains the same segment more than once
    - segment 13: (9, 0) -> (8, 0)
    - segment 15: (9, 0) -> (8, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2, 0) -> (9, 0)
    - reference segment 12: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 18
    - number of entries in reference solution: 38
    - 9 extra entries in student solution, including:
      '(9, 1) -> (8, 1)'

    - 29 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3)'


  * 15-by-4 grid
    - segments() contains the same segment more than once
    - segment 23: (14, 0) -> (13, 0)
    - segment 25: (14, 0) -> (13, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2, 0) -> (14, 0)
    - reference segment 30: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0)

    - number of entries in student   solution: 28
    - number of entries in reference solution: 79
    - 14 extra entries in student solution, including:
      '(14, 1) -> (13, 1)'

    - 65 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3)'


  * 25-by-4 grid
    - segments() contains the same segment more than once
    - segment 43: (24, 0) -> (23, 0)
    - segment 45: (24, 0) -> (23, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2, 0) -> (24, 0)
    - reference segment 92: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0) -> (20, 0) -> (21, 0) -> (22, 0) -> (23, 0) -> (24, 0)

    - number of entries in student   solution: 48
    - number of entries in reference solution: 213
    - 24 extra entries in student solution, including:
      '(24, 1) -> (23, 1)'

    - 189 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3) -> (15, 3) -> (16, 3) -> (17, 3) -> (18, 3) -> (19, 3) -> (20, 3) -> (21, 3) -> (22, 3) -> (23, 3) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> FAILED

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
    - failed on trial 1 of 5
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points


  * 25 points
    - failed on trial 1 of 10
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points


  * 5 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     5
      9899 27342
      3372 25336
     21091  2190
      9899 27342
     26882 19174

  * 4 points
    - failed on trial 4 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     4
     27057 16240
     23382  2029
     27431 12670
     27057 16240

  * 3 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     3
     17116 32234
     20068  6499
     17116 32234

  * 2 points
==> FAILED


Total: 10/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00           0         455            910                   63
=> passed    32   0.00           0        4495           8990                  144
=> passed    64   0.00           0       39711          79422                  372
=> passed   128   0.01           0      333375         666750                  875
=> passed   256   0.03           0     2731135        5462270                 1978
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00           0         540           1080                   60
=> passed    32   0.00           0        4894           9788                  155
=> passed    64   0.00           0       41189          82378                  376
=> passed   128   0.01           0      339327         678654                  863
=> passed   256   0.03           0     2757888        5515776                 1990
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        8064       18724          45512                19144
=> passed   128   0.01       32512       89511         211534                90802
=> passed   256   0.03      130560      415893         962346               414705
=> passed   512   0.26      523264     1899236        4321736              1901565
=> passed  1024   0.59     2095104     8555601       19206306              8582793
=> passed  2048   1.37     8384512    38108119       84600750             38188747
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (84600750 / 19206306) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8064        4764          17592                 7380
=> passed   128   0.00       32512       17796          68104                23822
=> passed   256   0.00      130560       68717         267994                81740
=> passed   512   0.02      523264      269399        1062062               297016
=> passed  1024   0.02     2095104     1065026        4225156              1122852
=> passed  2048   0.07     8384512     4231214       16846940              4351480
=> passed  4096   0.25    33546240    16859163       67264566             17108560
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (67264566 / 16846940) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8064       14906          37876                17117
=> passed   128   0.00       32512       43854         120220                63696
=> passed   256   0.01      130560      149618         429796               241119
=> passed   512   0.02      523264      548156        1619576               926707
=> passed  1024   0.07     2095104     2087496        6270096              3610699
=> passed  2048   0.28     8384512     8122445       24629402             14183646
=> passed  4096   0.93    33546240    31990953       97528146             56102734
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (97528146 / 24629402) = 1.99
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8064       18045          44154                19201
=> passed   128   0.00       32512       75863         184238                85793
=> passed   256   0.01      130560      232229         595018               340227
=> passed   512   0.04      523264      854545        2232354              1336279
=> passed  1024   0.13     2095104     3260991        8617086              5288754
=> passed  2048   0.42     8384512    12699218       33782948             21035632
=> passed  4096   1.66    33546240    50043244      133632728             83781312
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (133632728 / 33782948) = 1.98
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================


